{"version":3,"sources":["components/Grid/index.js","components/Form/index.js","components/List/index.js","utils/API.js","components/DeleteBtn/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","children","Row","Col","size","cols","split","map","element","join","Input","FormBtn","List","ListItem","style","padding","margin","fontFamily","getTodos","axios","get","saveTodos","todoData","post","deleteTodos","id","delete","DeleteBtn","onClick","deleteTodo","role","Card","todoList","flagUpdate","API","then","length","index","key","_id","todo","App","useState","setTodo","settodoList","flag","setFlag","useEffect","response","console","log","data","value","placeholder","onChange","event","target","type","disabled","preventDefault","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46eb7e01.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Container(props) {\n  return (\n    <div className={props.fluid ? \"container-fluid\" : \"container\"}>\n      {props.children}\n    </div>\n  );\n}\n\nexport function Row({ children }) {\n  return <div className=\"row\">{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\n// Here we are using the object desstructing syntax\nexport function Col({ size, children }) {\n  const cols = size\n    .split(\" \")\n    .map(element => \"col-\" + element)\n    .join(\" \");\n  return <div className={cols}>{children}</div>;\n}\n","import React, { useState } from \"react\";\n\n// This file exports the Input, TextArea, and FormBtn components\nexport function Input(props) {\n  return (\n    <div className=\"form-group\">\n      <input className=\"form-control\" {...props} />\n    </div>\n  );\n}\n\nexport function TextArea(props) {\n  return (\n    <div className=\"form-group\">\n      <textarea className=\"form-control\" rows=\"4\" {...props} />\n    </div>\n  );\n}\n\nexport function FormBtn(props) {\n  return <button {...props}>{props.children}</button>;\n}\n\nexport function useFormInput(initialState) {\n  const [value, setValue] = useState(initialState);\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n  const reset = () => {\n    setValue(initialState);\n  };\n\n  return [\n    value,\n    {\n      value,\n      onChange: handleChange\n    },\n    reset\n  ];\n}\n","import React from \"react\";\n\nexport function List(props) {\n  return <ul className=\"list-group\">{props.children}</ul>;\n}\n\nexport function ListItem({ children }) {\n  return (\n    <li\n      className=\"list-group-item\"\n      style={{\n        padding: \"0px 0px 0px 10px\",\n        margin: \"0px\",\n        fontFamily: \"PT Serif\"\n      }}\n    >\n      {children}\n    </li>\n  );\n}\n","import axios from \"axios\";\n\nexport default {\n  getTodos: function() {\n    return axios.get(\"/api/all\");\n  },\n  saveTodos: function(todoData) {\n    return axios.post(\"/api/todo\", todoData);\n  },\n  deleteTodos: function(id) {\n    return axios.delete(\"/api/todo/delete/\" + id);\n  }\n};\n","import React from \"react\";\n\n// The ...props means, spread all of the passed props onto this element\n// That way we don't have to define them all individually\nfunction DeleteBtn(props) {\n  return (\n    <span\n      className=\"btn\"\n      onClick={() => props.deleteTodo(props.id)}\n      role=\"button\"\n    >\n      âœ—\n    </span>\n  );\n}\n\nexport default DeleteBtn;\n","import React from \"react\";\n\nimport { List, ListItem } from \"../List/index.js\";\nimport API from \"../../utils/API.js\";\nimport DeleteBtn from \"../DeleteBtn/index.js\";\n\nexport function Card({ todoList, flagUpdate }) {\n  const deleteTodo = id => {\n    API.deleteTodos(id).then(() => flagUpdate());\n  };\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">TodoList</div>\n      <div className=\"card-body\">\n        <List>\n          {todoList.length\n            ? todoList.map((element, index) => (\n                <ListItem key={element._id ? element._id : index}>\n                  {element.todo}\n                  <DeleteBtn\n                    key={index}\n                    id={element._id}\n                    deleteTodo={deleteTodo}\n                  />\n                </ListItem>\n              ))\n            : \"\"}\n        </List>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Container } from \"./components/Grid/index.js\";\nimport { Input, FormBtn } from \"./components/Form/index.js\";\nimport { Card } from \"./components/Card/index.js\";\nimport API from \"./utils/API.js\";\n\nfunction App() {\n  const [todo, setTodo] = useState(\"\");\n  const [todoList, settodoList] = useState([]);\n  const [flag, setFlag] = useState(false);\n\n  useEffect(() => {\n    API.getTodos().then(response => {\n      console.log(`Executing the useEffect method and flag value is ${flag}`);\n      console.log(response.data);\n      settodoList(response.data);\n    });\n  }, [flag]);\n\n  const handleChange = event => {\n    setTodo(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (todo) {\n      API.saveTodos({ todo: todo })\n        .then(() => flagUpdate())\n        .catch(error => console.log(error));\n    }\n    setTodo(\"\");\n  };\n\n  const flagUpdate = () => setFlag(!flag);\n\n  return (\n    <div>\n      <Container fluid={1}>\n        <Row>\n          <Col size=\"md-12 sm-12\">\n            <h1 className=\"jumbotron text-center\">ToDo App</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md-10 sm-6\">\n            <Input\n              value={todo}\n              placeholder=\"Todo Task\"\n              onChange={handleChange}\n            ></Input>\n          </Col>\n          <Col size=\"md-2 sm-6\">\n            <FormBtn\n              type=\"button\"\n              className=\"btn btn-primary\"\n              disabled={!todo}\n              onClick={handleSubmit}\n            >\n              ADD\n            </FormBtn>\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md-12 xs-12\">\n            <Card todoList={todoList} flagUpdate={flagUpdate} />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}